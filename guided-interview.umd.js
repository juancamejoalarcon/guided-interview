(function(n,r){typeof exports=="object"&&typeof module<"u"?r(exports):typeof define=="function"&&define.amd?define(["exports"],r):(n=typeof globalThis<"u"?globalThis:n||self,r(n["Guided Interview"]={}))})(this,function(n){"use strict";var f=Object.defineProperty;var v=(n,r,o)=>r in n?f(n,r,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[r]=o;var c=(n,r,o)=>(v(n,typeof r!="symbol"?r+"":r,o),o);const r=()=>"id-"+(Math.random()+1).toString(36).substring(7),h=class{constructor(){c(this,"subscribers");this.subscribers={}}dispatch(e,i){const t=this.subscribers[e];t!==void 0&&Object.keys(t).forEach(s=>t[s](i))}register(e,i){const t=this.getNextId();return this.subscribers[e]||(this.subscribers[e]={}),this.subscribers[e][t]=i,{unregister:()=>{delete this.subscribers[e][t],Object.keys(this.subscribers[e]).length===0&&delete this.subscribers[e]}}}getNextId(){return h.nextId++}};let o=h;c(o,"nextId",0);const d={text:!0,multipleChoice:!0,number:!0};class l{constructor(e){c(this,"interview",new Map);c(this,"events",new o);c(this,"current");e&&this.init(e)}get questionsMap(){return this.interview}init(e){for(const i of Object.values(e))this.add(i)}add(e,i=!1){if(!d[e.type])throw new Error("Invalid question type");const t=e.id||r(),s={id:t,type:e.type,subType:e.subType||"",title:e.title||"",required:Boolean(e.required),indications:e.indications||"",value:e.value||"",logic:e.logic||{}};return this.interview.set(t,s),this.events.dispatch("question-added",s),s}canBeShown(e){var i;if((i=e.logic)!=null&&i.showIf){const t=this.interview.keys(),s=this.interview.values();return Function(...t,`return ${e.logic.showIf}`).bind(this)(...s)}return!0}setCurrent(e){if(!this.interview.has(e))throw new Error("No question with id:"+e);this.current=e,this.events.dispatch("set-current",this.getCurrent())}next(){const e=this.getCurrent().id,i=Array.from(this.interview);for(let t=0;t<i.length;t++){const[s]=i[t];if(e===s){const u=this.nextAvailableQuestion(t+1);u&&this.setCurrent(u[0]);break}}}nextAvailableQuestion(e){const i=Array.from(this.interview);for(let t=e;t<i.length;t++){const[s,u]=i[t];if(this.canBeShown(u))return i[t]}}previous(){const e=this.getCurrent().id,i=Array.from(this.interview);for(let t=0;t<i.length;t++){const[s]=i[t];if(e===s){const u=this.previousAvailableQuestion(t-1);u&&this.setCurrent(u[0]);break}}}previousAvailableQuestion(e){const i=Array.from(this.interview);for(let t=e;t>=0;t--){const[s,u]=i[t];if(this.canBeShown(u))return i[t]}}getCurrent(){this.current||(this.current=Array.from(this.interview)[0][0]);const e=this.interview.get(this.current);if(!e)throw new Error("Could not find current Quetion");return e}setValue(e,i){if(!this.interview.has(e))throw new Error("No question with id:"+e);this.interview.get(e).value=i,this.events.dispatch("set-value",this.interview.get(e))}on(e,i){this.events.register(e,i)}}n.GuidedInterview=l,Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});
